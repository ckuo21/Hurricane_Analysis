# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1
# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

def conversion(list_feed):
    damages_new = []
    for i in damages:
        if 'Damages not recorded' in i:
            a = 'Damages not recorded'
        elif 'M' in i: 
            a = float(i.strip('M'))*1000000
        elif 'B' in i: 
            a = float(i.strip('B'))*1000000000
        damages_new.append(a)
        
    return damages_new

# test function by updating damages

# print(conversion(damages))
damages_new = conversion(damages)
# 2 
# Create a Table
zipped = list(zip(names, months, years, max_sustained_winds, areas_affected, damages_new, deaths))
# Create and view the hurricanes dictionary
def hurricane_dict(list_combo):
  hurricanes_dict ={}

  for i in range(len(list_combo)): 
    hurricanes = {names[i]:{'Name':names[i], 'Month':months[i], 'Years':years[i], 'Max_Sustained_Winds':max_sustained_winds[i], 'Areas_Affected':areas_affected[i], 'Damage':damages_new[i], 'Death':deaths[i]}}
    hurricanes_dict.update(hurricanes)
  return hurricanes_dict
  
# print(hurricane_dict(zipped))
hurricanes_dict = hurricane_dict(zipped)
hurr_by_name = hurricane_dict(zipped)

print(hurricanes_dict)
# print(hurr_by_name.get('Cuba I'))
# 3
# Organizing by Year

# create a new dictionary of hurricanes with year and key

def year_dict(year):
  
  hurr_yr_list = []
  for i in hurr_by_name.values():
    if i['Years'] == year:
        hurr_yr_list.append(i)
  return hurr_yr_list

# print(year_dict(1932))

# 4
# Counting Damaged Areas
# create dictionary of areas to store the number of hurricanes involved in

from collections import Counter

def area_affected(hurr_dic):
    
    area_dic_list = []
    for i, j in hurr_dic.items(): 
        for l in j['Areas_Affected']:
            area_dic_list.append(l)
            hurr_count = Counter(area_dic_list)
    return hurr_count
        
# print(area_affected(hurricanes_dict))

area_affected_dict = area_affected(hurricanes_dict)

# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in

def most_often_area(area_count):
  a = area_count.most_common(1)
  return a

# print(most_often_area(area_affected_dict))
# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths
def max_death(dic):
  death_dict = {}
  for i, j in dic.items():
    death_dict_pre = {i:j['Death']}
    death_dict.update(death_dict_pre)
    fin_max = max(death_dict, key=death_dict.get)
  return fin_max

# print(max_death(hurricanes_dict))

# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}

# categorize hurricanes in new dictionary with mortality severity as key
def hurr_mortality(hurr_dic):
  hurricanes_by_mortality = {0:[],1:[],2:[],3:[],4:[],5:[]}
  for i, j in hurr_dic.items():
    if j['Death'] <= 100 and j['Death']>0: 
        hurricanes_by_mortality[1].append(j)
    elif j['Death']<=500 and j['Death']>100:
        hurricanes_by_mortality[2].append(j)
    elif j['Death']<=1000 and j['Death']>500:
        hurricanes_by_mortality[3].append(j)
    elif j['Death']<=10000 and j['Death']>1000:
        hurricanes_by_mortality[4].append(j)
    elif j['Death']>10000:
        hurricanes_by_mortality[5].append(j)
    else: hurricanes_by_mortality[0].append(j)

  return hurricanes_by_mortality

print(hurr_mortality(hurricanes_dict))
# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost
def max_damage(hurr_dict):
    max_damage = 0
    max_damage_cane = 'Cuba I'
    for i in hurricanes_dict.values():
        if i['Damage'] == 'Damages not recorded':
            continue
        if i['Damage'] > max_damage: 
            max_damage = i['Damage']
            max_damage_cane = i['Name']
            
    return max_damage, max_damage_cane
        
print(max_damage(hurricanes_dict))
# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
  
# categorize hurricanes in new dictionary with damage severity as key

def hurricanes_by_damage(hurr_dict):
    hurricanes_by_damage = {0:[],1:[],2:[],3:[],4:[],5:[]}
    for i, j in hurricanes_dict.items():
        if j['Damage'] == 'Damages not recorded' or j['Damage']<100000000: 
            hurricanes_by_damage[1].append(j)
        elif j['Damage']<=100000000 and j['Damage']>1000000000:
            hurricanes_by_damage[2].append(j)
        elif j['Damage']<=1000000000 and j['Damage']>10000000000:
            hurricanes_by_damage[3].append(j)
        elif j['Damage']<=10000000000 and j['Damage']>50000000000:
            hurricanes_by_damage[4].append(j)
        elif j['Damage']>50000000000:
            hurricanes_by_damage[5].append(j)
        else: hurricanes_by_damage[0].append(j)
        
    return hurricanes_by_damage


print(hurricanes_by_damage(hurricanes_dict))







